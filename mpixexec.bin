#!/usr/bin/env /home/user/mriera1/anaconda3/bin/python3
#!/usr/bin/sudo /home/user/mriera1/anaconda3/bin/python3
import os, sys, subprocess, time, re, socket
import string, random, enum, zmq, json

#SUDO     =  'sudo -E -u ' + os.getenv('SUDO_USER') + ' ' 
MPIRUN   =  '/usr/local/bin/mpiexec.hydra '
LDLIB    =  os.getenv('LD_LIBRARY_PATH')
PATH     =  os.getenv('PATH')
SUDO     =  'sudo env PATH='+PATH+' LD_LIBRARY_PATH='+LDLIB 
sys.path += PATH.split(':')
#test = MPIRUN
#p_rem_bridge = subprocess.Popen( test, shell=True ) 

def generate_random_str(num_char):
  return ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(num_char))

#jobid for run 
job_id = generate_random_str(16);
#valid mpix input args
mpix_defaults = [
  { "name" : "accel_address",      "need_value" : True,  "default" : ("ipc:///home_accel-"+job_id) },
  { "name" : "accel_job_id",       "need_value" : True,  "default" : job_id },
  { "name" : "accel_async",        "need_value" : True,  "default" : "true" },
  { "name" : "accel_repo",         "need_value" : True,  "default" : "" },
  { "name" : "accel_spawn_bridge", "need_value" : True,  "default" : "false" },
  { "name" : "accel_host_file",    "need_value" : True,  "default" : "" },
  { "name" : "accel_bridge_addr",  "need_value" : True,  "default" : socket.gethostname() },
  { "name" : "accel_bridge_port",  "need_value" : True,  "default" : "8001" },
  { "name" : "accelerate",         "need_value" : False, "default" : "" }
]

class APP_STATE(enum.Enum):
  NOTSTARTED   = 0
  STARTED      = 1
  INITIALIZING = 2
  INITIALIZED  = 3
  COMPLETED    = 4
  def get_value( state_str ):
    if state_str == 'NOTSTARTED':
      return APP_STATE.NOTSTARTED.value
    elif state_str == 'STARTED':
      return APP_STATE.STARTED.value
    elif state_str == 'INITIALIZING':
      return APP_STATE.INITIALIZING.value
    elif state_str == 'INITIALIZED':
      return APP_STATE.INITIALIZED.value
    elif state_str == 'COMPLETED':
      return APP_STATE.COMPLETED.value
    else:
      print ("Could not match state" + state_str)
    
class parameter_parser():
  def __init__(self, cmdline):
    self.input_parms  = ' '.join(cmdline[1:])
    self.mpi_exec     = MPIRUN + self.input_parms
    self.mpix_exec    = os.getenv('AGENT_ROOT_DIR') + "bridge_agent.bin -- " 
    self.mpi_hostfile = self.get_hostfile_location()
    self._process_mpix_parms()
    self._process_mpi_parms()

  def get_mpix_parm_value(self, parm_name):
    pp = parameter_parser( self.get_mpix_cmdline() ) 
    status, value = pp._get_parm_value( parm_name )
    return value

  def _requires_value( self, parm_name):
    for parm in mpix_defaults:
      if parm['name'] == parm_name:
        return parm["need_value"]

  def _generate_regex( self, parm_name ):
    reg = '--?' + parm_name + '(?=\ --?|[ =]([^\ ]+))'
    return reg
 
  def _remove_parm_from_mpi(self, parm_name):
    regex = '--?'+parm_name+'([^ ]+)?'
    self.mpi_exec = re.sub(regex, '', self.mpi_exec ) 

  def _get_parm_value(self, parm_name):
    status = 0
    value  = ''
    found_match = False
    regex = self._generate_regex( parm_name )
    matches = re.finditer(regex, self.input_parms, re.MULTILINE)
    for match in matches:
      found_match = True 
      if match.group(1) is not None:
        value = str(match.group(1))
      elif not self._requires_value( parm_name ):
        value = "true"
      else :
        status = 1
    #if not match found param doesn't exist
    if not found_match:
      status = 2 
    return status, value
        
  def _process_mpix_parms(self):
    for parm in mpix_defaults:
      name    = parm['name']
      default = parm['default']
      status, value = self._get_parm_value( name )
      if status == 2:
        if default is not '': 
          self.mpix_exec += '--' + name + '=' + default + " "
      elif status == 1:
        print ("Parse Error for " + name + ", default to " + default)
      else:
        self.mpix_exec += '--' + name + '=' + value + " "

  def _process_mpi_parms(self):
    for parm in mpix_defaults:
      self._remove_parm_from_mpi(  parm['name'] )
    self._append_mpix_parms()

  def _append_mpix_parms(self):
    mpi  = self.mpi_exec.split()
    mpix = self.mpix_exec.split()
    mpix.pop(0) #pop bridge binary
    self.mpi_exec = ' '.join(mpi + mpix)
    
  def get_hostfile_location(self) : 
    return self._get_parm_value("accel_host_file")

  def get_mpix_cmdline(self):
    return self.mpix_exec.split()

  def get_mpi_cmdline(self):
    return self.mpi_exec.split()

class sync_mpix_mpi_init():
  def __init__(self, job_id, proc):
    self._saved_state = APP_STATE.NOTSTARTED.value
    self._job_id    = job_id
    self.context = zmq.Context()
    print ("Connecting to server...")
    self.socket = self.context.socket(zmq.DEALER)
    self.socket.setsockopt(zmq.IDENTITY, b"status-agent")
    addr = "ipc:///home_accel-" + job_id
    self.socket.connect(addr)
    self._send_init()

  def _ping(self, retry=10):
    self.socket.send_multipart([b"PING", b"PING", b"PING"])
    while True:
      if not retry :
        return False # FAILED
      try:
        msg = self.socket.recv_multipart(zmq.NOBLOCK)
        return True # SUCCEED
      except zmq.error.Again: 
        retry = retry - 1
        time.sleep(1)

  def wait_for_init(self):
    status = self._check_status_or_timeout(APP_STATE.STARTED)
    if status : 
      status = self._check_status_or_timeout(APP_STATE.INITIALIZING)
      if status :
        return self._check_status_or_timeout(APP_STATE.INITIALIZED)
      else :
        print ("Never completed initialization")
    else : 
      print ("Never started bridge")
    return status

  def _send_init(self):
    self._ping()
    self.socket.send_multipart([b"__ACCEL_INIT_SA__", b"PLACEHOLDER", b"XXXXX"])
      
  def wait_for_completion(self):
    timeout = 10
    status = self._check_status_or_timeout(APP_STATE.COMPLETED, timeout)
    if status :
      _wait_for_cleanup()

  def _check_status_or_timeout(self, state, timeout=10, retry=10):
    #means the bridge is passed the state requesting
    #skip wait
    if ( (state.value <= self._saved_state)):
      return True

    while True:
      if not retry :
        return False # FAILED
      try:
        msg = self.socket.recv_multipart(zmq.NOBLOCK)
        print( msg )
        if (state.value <= APP_STATE.get_value( msg[0].decode() )):
          self._saved_state = APP_STATE.get_value(msg[0].decode() )
          return True # SUCCEED
      except zmq.error.Again: 
        retry = retry - 1
        time.sleep(timeout)

  def _wait_for_cleanup():
    #holds unitl the bridge sends the final cleanup response!
    msg = self.socket.recv_multipart()
    print ("Program Complete...")

class accelerator_ctrl():
  def __init__(self, job_id):
    self._job_id = job_id

  def ping(self):
    pass
  def cleanup( self ):
    pass
  def wait_for_cleanup(self):
    pass


class mpix_hostfile_manipulator:
  def __init__( self, mpix_hostfile ):
    self._arg = ''
    self._ss_arg = ''
    self._hosts = {}
    self.is_mpi_host = False
    #should probably check for existense TBD
    if mpix_hostfile is not '': 
      try:
        with open(mpix_hostfile) as f:
          print('\nReading configuration file...')
          data = json.load(f)
          print('Succesfully imported configuration file!\n')
        self._hosts = data['host_list']
        self.is_mpi_host = any((host['mode'] == 'ads_only') or 
                               (host['mode'] == 'ads_accel' ) for host in self._hosts)
        self._construct_mpi_host_arg()
      except:
        print ("Could not read mpix configfile! Check Path/Format")

  def is_mpi_hosts_defined( self ):
    return self.is_mpi_host
 
  # get multiple slot host args 
  def get_arg(self):
    return self._arg

  # get single slot host args
  def get_ss_arg(self):
    return self._ss_arg

  #creates an MPI formatted host file out of an MPIX hostfile
  def _construct_mpi_host_arg(self ):
    key = '-hosts '
    hosts = key
    ss_hosts = key
    found = False
    for host in self._hosts:
      hostname  = host['host_name']
      mode      = host['mode'] 
      max_slots = host['max_slots'] 

      if (mode == 'ads_only') or (mode == 'ads_accel'):
        hosts     += (hostname + ',')*int(max_slots)
        ss_hosts  += (hostname + ',')
        found      = True
    if found and (hosts != key) : 
      self._arg    = hosts[:-1]
      self._ss_arg = ss_hosts[:-1]
    else :
      self._arg    = ''
      self._ss_arg = ''

#adds the mpi hostfile parameter to cmd
def append_arg_to_cmd( cmd, arg ) :
  if arg != '':
    cmd[1:1] = arg.split()
  return cmd

def gen_remote_bridge_cmd(host_arg, mpix_cmd):
    cmd   = ' '.join(mpix_cmd) 
    bin_args = host_arg.split()
    _args  = bin_args[1].split(',')
    _args.remove( socket.gethostname() ) 
    nargs = len(_args)
    mpiexec = MPIRUN + '-np ' + str(nargs) + ' -ppn 1 ' 
    if nargs :
      #if thier are still args then add the host argument in
      new_host_arg =bin_args[0] + ' ' + ','.join(_args)
      mpiexec += new_host_arg + ' ' + cmd
      #mpiexec += new_host_arg + ' sudo -E ' + cmd
    else:
      #if there arent anymore host host than the home host no args
      mpiexec += 'sudo -E ' + cmd

    return nargs, mpiexec.split()
    
def main():
  mpix_pp         = parameter_parser( sys.argv )
  #grab some command line arguments
  job_id          = mpix_pp.get_mpix_parm_value('accel_job_id')
  mpix_host_file  = mpix_pp.get_mpix_parm_value('accel_host_file')
  accelerate      = (mpix_pp.get_mpix_parm_value('accelerate') == 'true')
  #read mpix host file and generate mpi args
  mpix_host_man   = mpix_hostfile_manipulator(mpix_host_file)
  mpi_hosts_args  = mpix_host_man.get_arg()
  ss_host_arg     = mpix_host_man.get_ss_arg()
  #connect to the accelerator agent utility
  mpix_aa_ctrl    = accelerator_ctrl(job_id) 
  #get cmdlines
  local_mpix_cmd  = mpix_pp.get_mpix_cmdline()
  mpi_cmd         = mpix_pp.get_mpi_cmdline()
  #mpi_rt_cmd      = mpi_cmd
  mpi_rt_cmd      = append_arg_to_cmd( mpi_cmd, mpi_hosts_args )
  bcnt, remote_mpix_cmd = gen_remote_bridge_cmd(ss_host_arg, local_mpix_cmd) 
  sudo_loc_mpi = SUDO.split() + local_mpix_cmd
  sudo_rem_mpi = SUDO.split() + remote_mpix_cmd
  sudo_rem_rt  = SUDO.split() + mpi_rt_cmd
  #sudo_rem_rt  = ("sudo env PATH="+PATH+" LD_LIBRARY_PATH="+LDLIB+ " ").split() +  mpi_rt_cmd
 
  print ("local mpix_cmd : "  + ' '.join(sudo_loc_mpi ) + '\n')
  print ("remote mpix_cmd : " + ' '.join(sudo_rem_mpi)   + '\n')
  print ("mpi_cmd : "         + ' '.join(sudo_rem_rt)    + '\n')
  if accelerate:
    print("Starting source bridge...\n")
    print ("local mpix_cmd : "   + ' '.join(sudo_loc_mpi) + '\n')
    #kick off source bridge agent
    p_loc_bridge = subprocess.Popen( sudo_loc_mpi ) 
    mpix_sync    = sync_mpix_mpi_init(job_id, p_loc_bridge)
    status       = False
    #if thier are any remote bridges that nead to be initied
    if bcnt : 
      print("Starting remote bridges...")
      print ("remote mpix_cmd : "   + ' '.join(sudo_rem_mpi) + '\n')
      p_rem_bridge = subprocess.Popen( sudo_rem_mpi) 
      #checks to see if the status and configure files 
      #were writen to
      status    = mpix_sync.wait_for_init()
      #check if the intialization failed
    else:
      status = True
      print("No remote bridges need to be inited")

    if status : 
      print("Starting runtime agents...")
      print ("mpi_cmd : "    + ' '.join(sudo_rem_rt) + '\n')

      f_rt_cmd = [] 
      path = 'PATH=' + PATH
      lib  = 'LD_LIBRARY_PATH='+ LDLIB
      [f_rt_cmd.append(i) if i!='sudo' else f_rt_cmd.extend(list((i,path,lib))) for i in sudo_rem_rt]
      #p_mpi = subprocess.Popen(f_rt_cmd)
      p_mpi = subprocess.Popen(sudo_rem_rt)
    else:
      if bcnt: 
        print("Error with initialization of src bridge")
      else:
        print("Error with intitalization of remote/src bridge")
      mpix_aa_ctrl.cleanup()
      # make a connection to the nexus ctrl should send a 
      # signal to terminate all bridges with the jobId and free resources and claims
      #wair for source bridge
    if bcnt : 
      p_rem_bridge.wait() #wait for remote bridges to complete 
      print('remote bridges complete')
    p_loc_bridge.wait()   #wait for local_Bridge to complete
    print('source bridges complete')
    #p_mpi.kill()
    p_mpi.wait()          #wait for application to finish
    print('ADS Threads are complete')

  else :
    print("Running Normal MPI...\n")
    #kick off mpi process
    p_mpi = subprocess.Popen( sudo_rem_rt )
    p_mpi.wait()

     
if __name__ == "__main__":
    main()
